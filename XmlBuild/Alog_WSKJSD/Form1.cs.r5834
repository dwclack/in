using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using System.IO;

namespace Alog_WSKJSD
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                //
                int i = 0;
                DataRow[] drs = RepXml.dtRepXmlSet.Select("parentid= 0");
                Thread[] t = new Thread[drs.Length];  //根据报文类型数定义线程数
                foreach (DataRow dr in drs)  //处理每种报文类型
                {
                    try
                    {
                        //ClsLog.AppendLog(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "  " + dr["RepTitle"].ToString() + "_线程开始", dr["RepTitle"].ToString());

                        if (dr["RepTitle"].ToString() == "出仓单报文记录")
                        {
                            ClsThreadParam ClsParam = new ClsThreadParam();
                            ClsParam.RepTitle = dr["RepTitle"].ToString();
                            ClsParam.dr = dr;
                            ClsParam.tCount = i;
                            ClsParam.AutoID = Convert.ToInt16(dr["AutoID"].ToString());
                            ClsParam.DSID = Convert.ToInt16(dr["DSID"].ToString());

                            RepXml rx = new RepXml();
                            t[i] = new Thread(new ParameterizedThreadStart(rx.ThreadHandle));
                            t[i].Start(ClsParam);
                        }
                      

                    }
                    catch (Exception ex)
                    {
                        //当数据库服务器连接断开导致异常时，定时器状态需要开启
                        // timer1.Enabled = true;
                        ClsLog.AppendLog("Flag=" + ex.Message, "服务日志");
                        i++;
                        continue;
                    }
                    i++;
                }
            }
            catch (Exception ex)
            {
                //当数据库服务器连接断开导致异常时，定时器状态需要开启
                ClsLog.AppendLog("Flag="  + ex.Message, "服务日志");
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Alog.Common.DataImport di = new Alog.Common.DataImport();
            try
            {
                string HZPath = ClsLog.GetAppSettings("HZPath");
                string HZPathTempBak = ClsLog.GetAppSettings("HZPathTempBak");
                string HZPathBak = ClsLog.GetAppSettings("HZPathBak");
                string[] Files = System.IO.Directory.GetFiles(HZPath);


                foreach (string file in System.IO.Directory.GetFiles(HZPath))
                {
                    try
                    {
                        if (di.ReadFile(file) == 0)
                        {
                            ClsLog.CopyFile(Path.GetFileName(file), Path.GetDirectoryName(file) + @"\",
                                        @"" + HZPathTempBak + @"\");
                            ClsLog.CopyFile(Path.GetFileName(file), Path.GetDirectoryName(file) + @"\",
                                            @"" + HZPathBak + DateTime.Now.ToString("yyyyMM") + @"\");
                            //di.ReadFile(file);
                            ClsLog.DeleteFile(file);

                        }
                    }
                    catch (Exception ex)
                    {
                        ClsLog.AppendLog(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + ex.Message, "服务日志");

                        continue;
                    }
                }
            }
            catch (Exception ex)
            {
                //当数据库服务器连接断开导致异常时，定时器状态需要开启
                ClsLog.AppendLog(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + ex.Message, "服务日志");
            }
        }
    }
}
